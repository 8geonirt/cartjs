<div class="jumbotron"><section class="container"><div class="row"><article class="col-md-10 reference"><h2 id="options">Options</h2><p>Configuration options are passed to <code>CartJS.init()</code> when initialising Cart.js.</p>
<p>See the <a href="/pages/guide#core-api-configuration">Configuration</a> section in the Guide.</p>
<h3 id="options-data-api">dataAPI</h3><p><em>Boolean (default: <code>true</code>)</em></p>
<p>When <code>true</code>, Cart.js will automatically bind <code>document</code> listeners for events related to element you&#39;ve marked up with <code>data-cart-</code> attributes.</p>
<p>If you&#39;re not making use of the Data API and are super-concerned with performance, you can set this to <code>false</code>, but in reality you&#39;ll probably never need to adjust this.</p>
<h3 id="options-request-body-class">requestBodyClass</h3><p><em>String (default: <code>null</code>)</em></p>
<p>If provided, Cart.js will automatically apply this class to the <code>body</code> element while an Ajax request is ongoing.</p>
<p>Useful for displaying a loading animation while an Ajax request is waiting to complete - for example:</p>
<p>{% raw %}</p>
<pre><code class="language-html">&lt;style&gt;
    .show-when-loading {
        display: none;
    }

    body.loading .show-when-loading {
        display: inline-block;
    }
&lt;/style&gt;
&lt;body&gt;
    &lt;button data-cart-add=&quot;12345678&quot;&gt;Add a Product&lt;/button&gt;
    &lt;img src=&quot;{{ &#39;loader.gif&#39; | asset_url }}&quot; class=&quot;&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Loading...&quot; /&gt;
&lt;/body&gt;</code></pre>
<p>{% endraw %}</p>
<h3 id="options-rivets-models">rivetsModels</h3><p><em>Object (default: <code>{}</code>)</em></p>
<p>If you&#39;re using Rivets.js for DOM bindings, this setting allows you to pass additional data models that can be used in your rendered views.</p>
<p>{% raw %}</p>
<pre><code class="language-html">&lt;div data-cart-view&gt;
    Your name is {customer.name}.
&lt;/div&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    $(function() {
        CartJS.init({{ cart | json }}, {
            rivetsModels: {
                &quot;customer&quot;: {{ customer | json }}
            }
        });
    });
&lt;/script&gt;</code></pre>
<p>{% endraw %}</p>
<h2 id="core-api">Core API</h2><p>Core API methods are available on the global <code>CartJS</code> object.
They can be called from anywhere - an event handler, your startup code, event in an <code>onclick=&quot;&quot;</code> attribute if you&#39;re feeling old school.</p>
<h6><code>getCart()</code></h6>
<p>Fetch the current cart status from the server.</p>
<h6><code>addItem(id, quantity = 1, properties = {})</code></h6>
<p>Add a product variant with the given <code>id</code> to the cart.</p>
<h3 id="core-api-add-item">addItem</h3><p><code>CartJS.addItem(id, quantity = 1, properties = {})</code></p>
<p>Add the variant with the given <code>id</code> to the cart, optionally specifying a <code>quantity</code> (default <code>1</code>) and a hash of custom line item <code>properties</code>.</p>
<pre><code class="language-js">// Add five items with the variant id 12345678 to the cart, with a custom size property.
CartJS.addItem(12345678, 5, {
    &quot;size&quot;: &quot;XL&quot;
});</code></pre>
<h3 id="core-api-update-item">updateItem</h3><p><code>CartJS.updateItem(line_number, quantity = 1, properties = {})</code></p>
<p>Update the quantity and properties of the line item with the specified <code>line_number</code> in the cart.
Line numbers are one-indexed; that is, the first line item has a <code>line_number</code> of <code>1</code>.</p>
<p>Setting <code>quantity</code> to <code>0</code> will remove the item from the cart.</p>
<pre><code class="language-js">// Let&#39;s have 6 of the first item in the cart.
CartJS.updateItem(1, 6);</code></pre>
<h3 id="core-api-remove-item">removeItem</h3><p><code>CartJS.removeItem(line_number)</code></p>
<p>Remove the line item with the specified <code>line_number</code> from the cart.
Line numbers are one-indexed; that is, the first line item has a <code>line_number</code> of <code>1</code>.</p>
<pre><code class="language-js">// Remove the first line item from the cart.
CartJS.removeItem(1);</code></pre>
<h3 id="core-api-update-item-by-id">updateItemById</h3><p><code>CartJS.updateItemById(id, quantity = 1, properties = {})</code></p>
<p>Update the quantity and properties of the line item with the specified variant <code>id</code> in the cart.
If multiple line items exist for the specified variant, all of them will be updated.</p>
<pre><code class="language-js">// Make sure we have six pairs of blue socks (variant #12345678).
CartJS.updateItemById(12345678, 6);</code></pre>
<h3 id="core-api-remove-item-by-id">removeItemById</h3><p><code>CartJS.removeItemById(id)</code></p>
<p>Remove the line item with the specified variant <code>id</code> from the cart.
If multiple line items exist for the specified variant, all of them will be removed.</p>
<pre><code class="language-js">// Get rid of all blue socks (variant #12345678) from our order.
CartJS.removeItemById(12345678);</code></pre>
<h3 id="core-api-clear">clear</h3><p><code>CartJS.clear()</code></p>
<p>Clear the cart of all line items.
Does not clear cart attributes or the cart note.</p>
<pre><code class="language-js">// Clear all items from the cart.
CartJS.clear();</code></pre>
<h3 id="core-api-get-attribute">getAttribute</h3><p><code>CartJS.getAttribute(attributeName, defaultValue = undefined)</code></p>
<p>Get the cart attribute specified by <code>attributeName</code>.
If the specified attribute isn&#39;t set, <code>defaultValue</code> will be returned (defaults to <code>undefined</code>).</p>
<pre><code class="language-js">// See if the cart has a gift note (by default it doesn&#39;t).
var hasGiftNote = CartJS.getAttribute(&#39;Has Gift Note&#39;, false);
if(hasGiftNote) {
    var giftMessage = prompt(&#39;Please enter your gift note:&#39;);
}</code></pre>
<h3 id="core-api-set-attribute">setAttribute</h3><p><code>CartJS.setAttribute(attributeName, value)</code></p>
<p>Set the attribute specified by <code>attributeName</code> to the specified <code>value</code>.</p>
<pre><code class="language-js">// If there&#39;s a giftable item in our order, flag that we need a gift note.
if(hasGiftableItem) {
    CartJS.setAttribute(&#39;Has Gift Note&#39;, true);
}</code></pre>
<h3 id="core-api-get-attributes">getAttributes</h3><p><code>CartJS.getAttributes()</code></p>
<p>Get all currently set cart attributes, returned as an object.</p>
<pre><code class="language-js">// Print out current cart attributes.
console.log(CartJS.getAttributes());
// -&gt; Object {a: &quot;b&quot;}</code></pre>
<h3 id="core-api-set-attributes">setAttributes</h3><p><code>CartJS.setAttributes(attributes = {})</code></p>
<p>Set multiple cart attributes at once by passing an <code>attributes</code> hash.</p>
<pre><code class="language-js">// Flag that the cart has a gift note, and set the content of that note.
CartJS.setAttributes({
    &quot;Has Gift Note&quot;: true,
    &quot;Gift Note&quot;: &quot;Happy Birthday!&quot;
});</code></pre>
<h3 id="core-api-clear-attributes">clearAttributes</h3><p><code>CartJS.clearAttributes()</code></p>
<p>Clear all cart attributes.
Does not clear cart line items or the cart note.</p>
<pre><code class="language-js">// Clear all attributes from the cart.
CartJS.clearAttributes();</code></pre>
<h3 id="core-api-get-note">getNote</h3><p><code>CartJS.getNote()</code></p>
<p>Returns the current cart note.</p>
<pre><code class="language-js">// Let the customer know what the current cart note is.
alert(&#39;Your cart note is currently: &#39; + CartJS.getNote());</code></pre>
<h3 id="core-api-set-note">setNote</h3><p><code>CartJS.setNote(note)</code></p>
<p>Set the cart note.</p>
<pre><code class="language-js">// Get any notes from the customer.
CartJS.setNote(prompt(&quot;Please add any notes: &quot;));</code></pre>
<h2 id="data-api">Data API</h2><h2 id="events">Events</h2><p>This section lists all of the custom events triggered by Cart.js.
See also the [Events][] section of the Cart.js guide.</p>
<h2 id="dom-binding">DOM Binding</h2></article><aside class="col-md-2 hidden-sm hidden-xs"><div class="pull-right"><nav id="nav" data-spy="affix" data-offset-top="102"><ul class="nav nav-docs"><li><a href="#options">Options</a><ul class="nav"><li><a href="#options-data-api">dataAPI</a></li><li><a href="#options-request-body-class">requestBodyClass</a></li><li><a href="#options-rivets-models">rivetsModels</a></li></ul></li><li><a href="#core-api">Core API</a><ul class="nav"><li><a href="#core-api-add-item">addItem</a></li><li><a href="#core-api-update-item">updateItem</a></li><li><a href="#core-api-remove-item">removeItem</a></li><li><a href="#core-api-update-item-by-id">updateItemById</a></li><li><a href="#core-api-remove-item-by-id">removeItemById</a></li><li><a href="#core-api-clear">clear</a></li><li><a href="#core-api-get-attribute">getAttribute</a></li><li><a href="#core-api-set-attribute">setAttribute</a></li><li><a href="#core-api-get-attributes">getAttributes</a></li><li><a href="#core-api-set-attributes">setAttributes</a></li><li><a href="#core-api-clear-attributes">clearAttributes</a></li><li><a href="#core-api-get-note">getNote</a></li><li><a href="#core-api-set-note">setNote</a></li></ul></li><li><a href="#data-api">Data API</a><ul class="nav"></ul></li><li><a href="#events">Events</a><ul class="nav"></ul></li><li><a href="#dom-binding">DOM Binding</a><ul class="nav"></ul></li></ul></nav></div></aside></div></section></div>